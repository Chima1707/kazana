#!/usr/bin/env node

var startKazanaServer = require('kazana-server')
var options = require('minimist')(process.argv.slice(2))
var path = require('path')
var mainPath = options.main ? path.resolve(options.main) : process.cwd()
var main = require(mainPath)

var core = require('../index')
var corePlugins = [core].concat(main.plugins || [])
var plugins = startKazanaServer.gatherPlugins(corePlugins)
var findWhere = require('lodash/collection/findWhere')
var pluck = require('lodash/collection/pluck')

var config = startKazanaServer.getConfig(main)

if (options.only) {
  var service = findWhere(plugins, {name: options.only})
  if (!service) {
    console.log('Unknown service: "%s". (%s)', options.only, pluck(plugins, 'name').join(', '))
    process.exit(1)
  }

  options.bare = true
}

if (config.backend.name === 'couchdb') {
  console.log('Connected to CouchDB at %s', config.backend.location)
} else {
  if (options.bare) {
    console.error('Must set backend.name="couchdb" & backend.location="http://my.couch.com:5984" when starting with --bare or --only=')
    process.exit(1)
  }
  console.log('backend.location not set, starting PouchDB Server at %s ...', config.backend.port)
}

startKazana()

function startKazana () {
  var config = service || main
  if (options.port) {
    config.port = parseInt(options.port, 10)
  }

  if (!service) {
    config.plugins = corePlugins
  }

  startKazanaServer(config, {
    // if set to true, core modules like the kazana-raw-data do not get loaded
    bare: options.bare
  }, function (error, server) {
    if (error) {
      throw new Error(error.message)
    }

    server.start(function (error) {
      if (error) {
        throw error
      }

      console.log('Server running at ' + server.info.uri)
    })
  })
}
